[ { "title": "战斗集群", "url": "/posts/%E6%88%98%E6%96%97%E9%9B%86%E7%BE%A4/", "categories": "战斗", "tags": "战斗, 集群", "date": "2022-06-17 10:40:20 +0800", "snippet": "" }, { "title": "九宫格AOI", "url": "/posts/%E4%B9%9D%E5%AE%AB%E6%A0%BCAOI/", "categories": "场景", "tags": "九宫格, AOI", "date": "2022-01-24 20:40:20 +0800", "snippet": "九宫格把整个场景划分为多个格子，每个格子存储对应坐标范围的对象集合。 数据结构 场景网格使用二维数组（随机访问）存储对应xy坐标的对象链表（频繁插入删除），若地图的规格大小为300*300，一个格子的大小为30，则有10*10个格子。 使用map存储entityId和对象的数据，便于获取对应对象。 对象的视野半径最大为1个格子的大小，但也不能太小，因为需要预留客户端资源加载的时间。 aoi对象只存储entityId和aoi，位置数据，只做视野计算和回调通知，由业务层的对象entity保存兴趣列表和被关注列表。 兴趣列表：进入我AOI范围的实体，我感兴趣的对象集合。 被关注列表：我进入了谁的AOI范围，关注我的对象集合。 对象进入判定对象node坐标边界，将其插入对应格子的对象链表中，并放入到map中，遍历判断周围9个格子的所有对象iter与node的视野距离。 如果iter在node的视野内，则执行Enter回调函数，将iter加入到node的兴趣列表，同时node会被加入到iter的被关注列表。 如果node在iter的视野之内，则执行Enter回调函数，将node加入到iter的兴趣列表，同时iter会加入到node的被关注列表。对象离开从map中获取到特定对象，将其从对应格子的对象链表中移除，并移除map中的对象，遍历判断周围9个格子的所有对象iter与node的视野距离。 如果iter在node的视野内，即iter离开node的视野范围，则执行Leave回调函数，将iter从node的兴趣列表中移除，同时node从iter的被关注列表移除。 如果node在iter的视野内，即node离开iter的视野范围，则执行Leave回调函数，将node从iter的兴趣列表移除，同时iter从node的被关注列表移除。对象移动从map中获取到特定对象，将其从旧坐标对应格子的对象链表中移除，并插入到新坐标对应的格子链表中。 若对象移动后仍然在原来的格子，则只遍历九宫格的所有对象 若对象移动到了新的格子，则遍历新旧格子的交集格子 旧坐标时iter在node视野内，而新坐标时iter不在node的视野内，即iter离开node的视野范围，则执行Leave回调函数，将iter从node的兴趣列表中移除，同时node从iter的被关注列表移除。 旧坐标时iter不在node视野内，而新坐标时iter在node的视野内，即iter进入node的视野，则执行Enter回调函数，将iter加入到node的兴趣列表，同时node会被加入到iter的被关注列表。 旧坐标时node在iter的视野内，而新坐标时node不在iter的视野内，即node离开iter的视野范围，则执行Leave回调函数，将node从iter的兴趣列表移除，同时iter从node的被关注列表移除。 旧坐标时node不在iter视野内，新坐标时node在iter视野内，即node进入iter的视野，则执行Enter回调函数，将node加入到iter的兴趣列表，同时iter会加入到node的被关注列表。 优化 判断aoi范围精度并不需要太严格时，计算方形距离而不是圆形距离。圆形需要计算平方，而方形则只需要判断长宽大小。 避免大量玩家聚集在一个点上，可以通过分线去处理。 需要广播的数据减少序列化操作，aoi和寻路可以独立其他线程计算。应用场景 九宫格更适合对象频繁进出场景的情况，因为坐标取商便可获得对应的格子，并且插入到链表中也是极快的。 九宫格每次对象的小幅度移动，也需要遍历周围的九个格子，进行了大量不必要的运算。 占用的内存会比较浪费，根据场景的规格大小必须为所有格子预留一个链表指针。" }, { "title": "十字链表AOI", "url": "/posts/%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8AOI/", "categories": "场景", "tags": "十字链表, AOI", "date": "2022-01-18 17:40:20 +0800", "snippet": "十字链表根据2d地图坐标系将其分成x轴和y轴两个双向链表，如果是3d地图，则需要多维护一条代表高度的双向链表。对象按照坐标值从小到大相应的排列在相应的坐标轴上面。 数据结构 对象的视野半径必须固定最大视野范围，例如坐标系+/-3，在对象进入，移动，离开时作为遍历xy链表的范围。判断是否在视野范围时，需要分别遍历x、y两轴，再求两轴的交集。 aoi对象只存储entityId和aoi，位置数据，只做视野计算和回调通知，由业务层的对象entity保存兴趣列表和被关注列表。 兴趣列表：进入我AOI范围的实体，我感兴趣的对象集合。 被关注列表：我进入了谁的AOI范围，关注我的对象集合。 对象进入新增的对象需要根据x坐标和y坐标，遍历对应的链表并找到合适的位置插入。 对象移动对象移动后若只改变x坐标，则只调整x轴链表，若只改变y轴坐标，则只调整y轴链表。根据移动后的坐标找到合适的位置并调整链表节点指针的指向。 对象离开对象离开则将链表中的对应节点断开即可。 优化 每次新增对象，都需要遍历对应的链表找到对应的位置插入，此处可以通过快慢指针加快遍历，快指针每次移动n个位置，直到大于新增对象的坐标值，则慢指针开始往快指针位置逐个移动，直到找到合适的位置。否则插入到链表的尾部。 只用一条x轴链表，遍历x轴，判断每个实体是否在视野内更高效。可以使用跳跃表替换。应用场景 十字链表不适合对象频繁进出场景的情况。因为每次对象的进入都需要往x轴和y轴双向链表中找到合适的位置插入。 十字链表每次对象的小幅度移动，只需要关注x轴和y轴更精准的邻居是否在视野内，没有多余的运算。" }, { "title": "Jps寻路算法", "url": "/posts/Jps%E5%AF%BB%E8%B7%AF%E7%AE%97%E6%B3%95/", "categories": "寻路", "tags": "Jps, 跳点搜索, 强迫邻居", "date": "2022-01-17 10:40:20 +0800", "snippet": "Jps跳点搜索算法 Astar算法在搜索过程中需要把所有的邻居都检查一遍，并将其可走的节点加入到open_list中。 Jps算法搜索过程中只需要检查必要的邻居，将其满足条件的跳点加入到open_list中。强迫邻居节点 n 的8个邻居中有障碍，且 n  的父节点 p 经过n 到达 x 的距离代价比不经过 n 到达 x 的任意路径的距离代价小，则称 x 是 n 的强迫邻居。 筛选邻居节点只需要判定必要的邻居节点是否可走 当前节点n为起点：除了上下左右节点，若当前节点往斜边节点的方向存在任意一个可走节点，则斜边节点也需要判定。 当前节点n与其父节点p的方向向量为斜向：判定斜向分解的x轴和y轴的下个节点，若x轴或y轴的下个节点任意一个可走，则斜向节点也需要判定，若存在强迫邻居节点也需要判定。 当前节点n与其父节点p的方向向量为x轴：判定x轴的下个节点是否可走，若存在强迫邻居节点也需要判定。 当前节点n与其父节点p的方向向量为y轴：判定y轴的下个节点是否可走，若存在强迫邻居节点也需要判定。 ##### 筛选跳点 从筛选过的邻居节点中再次筛选出跳点（必须为有效可走节点）加入到open_list中 邻居节点j与当前节点n的方向向量是x轴或者y轴：沿着方向向量逐个节点搜索，直到返回。 若满足以下两点则返回有效节点： 节点j至少有一个强迫邻居节点x 节点j为终点 若节点j的下一个节点不可走，则返回无效节点 邻居节点j与当前节点n的方向向量是斜向：将斜向向量拆解成x轴和y轴，沿着斜向向量逐个节点搜索，直到返回。 若满足以下条件则返回有效节点： 节点j为终点。 节点j至少有一个强迫邻居x，则返回有效节点。 若沿着x轴逐个搜索后返回有效节点，则返回有效节点；若沿着y轴逐个搜索后返回有效节点，则返回有效节点。 若x轴或y轴的下一个节点都不可走，或者斜向的下一个节点不可走，则返回无效节点。 算法步骤 find_path_init：初始化open_list，并将起点加入open_list中 find_path_step： 取出open_list中f值最小的节点node，设置状态为close。 筛选并遍历节点node的邻居节点，再次筛选有效跳点进入open_list的判定。 若跳点状态为unknown，则计算跳点的g值和f值，并设置parent指针为node，将跳点加入到open_list中 若跳点状态为open，根据node的g+d得到newg，当newg&amp;lt;跳点的g时，设置parent指针为node 循环find_path_step的操作，直到open_list为空或者node等于终点。 find_path_finish：搜到终点后通过parent指针，便能从终点一步步回溯通过的路径点。优化处理 地图数据预处理：先对地图每个节点进行跳点判断，找出所有主要跳点" }, { "title": "Astar寻路算法", "url": "/posts/Astar%E5%AF%BB%E8%B7%AF%E7%AE%97%E6%B3%95/", "categories": "寻路", "tags": "Astar, 曼哈顿距离, 欧几里得距离, 对角线距离", "date": "2022-01-12 10:40:20 +0800", "snippet": "曼哈顿距离图形中只允许朝上下左右四个方向移动 计算公式：设格子的单位长度为D(|A.x-B.x|+|A.y-B.y|)*D欧几里得距离图形中允许朝任何方向移动 计算公式：根据勾股定理求斜边。设格子的单位长度为Ddx=|A.x-B.x|dy=|A.y-B.y|Dsqrt(dxdx+dy*dy)对角线距离图形中允许朝八个方向移动 计算公式：设格子的单位长度为D，那么斜向移动一单位距离，根据勾股定理，求腰为D的等腰直角三角形的斜边，即√2D。dx=|A.x-B.x|dy=|A.y-B.y|D*(dx+dy)+(√2D-2D)*min(dx,dy)计算机处理浮点数比较耗费资源，可以在损失一定精度的情况下进行优化。√2≈1.4，假设D=10，则√2D≈14，将浮点数转换成整数计算A*算法估算公式：f(n)=g(n)+h(n) g(n)是当前节点到起点的真实距离，g(n)的计算方法：前一个节点的g(n)值加上两节点之间的距离d h(n)是当前节点到终点的“估算距离”（无视障碍物情况下的预测值，也可理解成该点到终点的直线距离的值）待遍历的节点集合：open_list 节点的状态：open（待处理），close（已处理），unknown（初始） 前置节点指针：parent算法步骤： find_path_init：初始化open_list，并将起点加入open_list中 find_path_step： 取出open_list中f值最小的节点node，设置状态为close 获取并遍历节点node的邻居节点（4/8方向），邻居节点必须为可走 若邻居节点状态为unknown，则计算邻居节点的g值和f值，并设置parent指针为node，将邻居节点加入到open_list中 若邻居节点状态为open，根据node的g+d得到newg，当newg&amp;lt;邻居节点的g时，设置parent指针为node 循环find_path_step的操作，直到open_list为空或者node等于终点。 find_path_finish：搜到终点后通过parent指针，便能从终点一步步回溯通过的路径点。优化思路： open_list需要频繁加入节点，并且每次都需要取出最小值，可以使用最小堆实现。业务需求： 业务只允许4方向移动，在寻找邻居节点的时候，只需要判定上下左右的节点。 业务允许8方向移动，在寻找邻居节点的时候，除了需要判定上下左右节点，若当前节点往斜边节点的方向存在任意一个可走节点，则斜边节点也需要判定。 下图中虽然斜边节点可走，但实际上是不可走的 下图中这种斜边节点才可走 估算公式需要换成对角线距离，估算公式会影响路线的最优解。寻路演算 曼哈顿距离： 欧几里得距离： " }, { "title": "游戏寻路方案", "url": "/posts/%E6%B8%B8%E6%88%8F%E5%AF%BB%E8%B7%AF%E6%96%B9%E6%A1%88/", "categories": "寻路", "tags": "寻路方案", "date": "2022-01-09 20:40:20 +0800", "snippet": "Grid将游戏原始地图分割成网格，数据结构表现为二维数组，用0和1分别标识格子是否可走，没有地图的高度信息，因此比较适合2d地图，例如战棋类游戏 优点：容易动态修改地图的某个格子是否可走。算法可以多选，A*和JPS都支持 缺点：内存占用比较大，格子越小寻路的精确越高，同时占用的内存也会更大2d地图寻路： 首先在地图中每0.5的间隔生成二维数据的高度图（不允许有多个高度），然后在地编工具中美术把地图的可走块标记出来，根据标记的点把它周围的格子广度遍历找出所有能走的点，其它就是不可走，将高度图二维数据结合二次处理后再次导出 服务器遍历高度图的每一个格子，对比它上下左右四个格子的高度差，当高度差都不超过阈值时标志该格子为可走，否则不可走，由此得出一个可走图，用可走图来做寻路 多层寻路网格： 多层寻路网格需要把所有可行走的区域分成多个层级，每一层都有自己的网格数据，也可以包含当前层的楼梯部分的数据，例如二层的寻路网格数据可以包含一到二层的楼梯部分的数据，也将楼梯部分的数据单独拆分出来成为一个独立的层级 寻路时只关心当前层的数据，以及当前层上一层与下一层的数据，当要跨越层级寻路时，首先确定目前所在层级，目的地的层级，按次序一层层往上走或者往下寻路，比如目的地是二楼，所在的起点是一楼，那么由一楼层级开始，从起点寻路到楼梯层的入口点，进入楼梯层后，从楼梯层数据中找到与二层楼衔接的入口点并寻路，最后到达二层楼并向目的地寻路 层级网格数据需要对层级之间的入口区域做记录，比如第一层某个矩形为第一层与第二层的衔接，只要进入这个范围就认为切换了层级，角色身上的层级标记也相应地变化，此时索引到的寻路网格数据也变成了当前层的数据优化： 因为网格是以一个格子为单位，因此会以红色那条路线移动，实际上当AB中间不存在障碍物时，应该以黑色的路线移动会更自然，因此在寻路前先判断两点之间是否有障碍物，若两点之间无障碍则无需寻路。 根据两点坐标的方向向量，如果是垂直方向，则往目标y轴逐个格子判断是否可走，如果是水平方向，则往目标x轴逐个格子判断是否可走。 如果是斜向，则根据直线斜率公式y=kx+b；计算得到偏移值b和斜率k，遍历两点坐标之间的所有格子，根据k值边界过滤，并判断直线和矩形的关系。 直线与矩形相交：判断相交的格子是否可走，如果相邻的两个格子都不可走，则被夹在中间的格子也应该不可走 直线在矩形上方：根据k值分别缩小边界 直线在矩形下方：根据k值分别缩小边界 WayPoint在地图编辑器中直接标记一些路点，路点之间不能存在障碍，寻路只能在这些已知的路线进行，因此比较适合NPC固定路线移动。 优点：占用极少的内存和计算消耗 缺点：每张地图都需要人工去编辑复杂的路点，工作量大。 Recastnavigation 源码导航网格是由多个poly组成，同一个poly中的两点在忽略高度的情况下是可以直达的，而两点位于不同的poly，则利用导航网格配合A*算法得到经过的poly，再算出具体路径，同时引入了地图高度，比较适合3d地图。 优点：更为精准表达地图，poly会比grid数量少，占用的内存会少 缺点：unity的navmesh可以导出寻路网格，但是和recastnavigation库不完全兼容，因此可以采用第三方插件导出寻路网格第三方插件 地图数据处理 服务端加载的源地图数据需要在多线程内共享并且加锁，避免浪费内存。 调用主体是lua，so库返回包含源数据指针和副本数据指针的userdata，副本数据指针默认指向源数据。 如果需要动态改变地图的格子是否可走，则需要拷贝源地图数据，创建地图数据的副本，并改变副本数据指针的指向，后续的所有操作都基于副本数据，gc时把副本数据清理，源数据常驻。 " }, { "title": "ATB回合制战斗", "url": "/posts/ATB%E5%9B%9E%E5%90%88%E5%88%B6%E6%88%98%E6%96%97/", "categories": "战斗", "tags": "战斗, ATB, 技能, Buff", "date": "2021-12-29 20:40:20 +0800", "snippet": "战斗流程 玩家所在agent服务发起战斗请求，获取动态的战斗服务，由战斗池服务根据唯一key分配一个相对空闲的战斗服务返回 玩家所在agent服务注册到该战斗服务中，在战斗服务中创建playerObj，并与agent的玩家对象绑定，战斗的协议由agent服务转发到战斗服务处理 agent构造战斗所需要的数据传递到战斗服，由战斗服根据类型创建战斗对象和实体对象 战斗结束后，通知agent服务战斗结果，释放战斗池服务的唯一key，取消agent服务到战斗服的注册，移除战斗服务中的playerObj，并移除战斗对象 ATB回合制拉条机制 基础公式：vt=s，路程s（ATB回合制概念中的行动条定值），速度v（ATB回合制概念中用来衡量战斗单位出手的顺序speed值） 核心思路：行动条实际上是一个环形跑道，回合出手判定获取当前行动对象时，每个战斗对象计算出自身已跑的路程s1，用总路程-s1得到自身剩余路程s2，s2/v=t，根据t值进行排序，t值最小的战斗对象最先出手，对象出手后回到起跑原点，其他对象根据最小t累加路程s1。 抛弃的思路：基于状态驱动，每次出手后根据每个对象最新的speed，重新计算出下一个应该出手的对象和时间，再设置定时器。战斗主循环 每个战斗回合实际上由固定的几个状态组成，由此决定战斗逻辑的主流程可使用有限状态机实现 BattleBegin = 1, --战斗开始（执行被动树）CalNextActionObj = 2, --获得下一个出手角色RoundBegin = 3, --回合开始ActionBeforeCountBf = 4, --行动前的count结算前 （执行被动树，推送协议）ActionBeforeCountAf = 12, --行动前的count结算后 （执行被动树，推送协议）SelectSkillBefore = 5, --选择技能前（暂停状态机）ReleaseSkillBefore = 6, --释放技能前（执行被动树）ReleaseSkillAfter = 7, --释放技能后（执行被动树）CalCountBefore = 8, --行动后的count结算前（执行被动树）CalCountAfter = 9, --行动后的count结算后（执行被动树）RoundEnd = 10, --回合结束(推送协议)BattleEnd = 11, --战斗结束 每场战斗都有一个循环Update执行对应状态的逻辑函数 function BattleObject:Update()    while true do        --状态机关闭        if self.fsmClose then            return        end        local funcName = BattleStateType[self.m_state]        local func = self[funcName]        xpcall(func, GTraceback, self)    endend 每个状态逻辑函数处理特定的战斗逻辑，并都会指向下一个状态 function BattleObject:SetState(state)    self.m_state = stateendfunction BattleObject:BattleBegin()    self:RunPassiveSkillTree()    self:SetState(BattleStateType.CalNextActionObj)end 当需要玩家操作时，则需要暂停运行状态机（使用协程实现），当玩家下达操作指令后，重新唤醒状态机继续执行。需要定时器检查玩家超时操作，超时则AI行为树去选定技能和目标，并重新唤醒状态机技能的实现技能分为主动技能和被动技能。主动技能由玩家下达指令释放或者执行AI行为树释放，而被动技能则是在状态机特定的状态处理函数中，每个实体根据各自的被动行为树Id执行一遍行为树逻辑，从而决定是否释放被动技能，例如： 无论是被动技能还是主动技能，其逻辑处理都应该是一致的。 hit部分：hit只做伤害的计算，支持多段伤害的配置，每一段的伤害配置都应该有独立的目标选择树 技能可选目标：通过执行行为树逻辑得到该技能的可选目标 技能表现：主要跟hit部分对应起来，客户端根据skillShow读取技能编辑器中对应的配置去表现，例如在释放技能后的0.2s后移动到敌人面前，0.4s后播放特效视频。 技能效果：效果全部由buff实现。根据不同的效果，需要在hit前，hit中，hit后这几个时机增加buff。 召唤物：释放技能后根据怪物Id生成召唤物，增加对应的实体对象，怪物属性可以是读取配置的，也可以是继承施法者。 驱散：释放技能后根据驱散类型（例如根据buffId，或者buffTag），移除目标身上的buff。 偷取：释放技能后根据偷取类型（例如根据buffId，或者buffTag），首先移除目标身上的buff，并把对应的buffId加到释放者身上。 技能cd：使用技能后将cd重置为const，每个回合将cd-1，当cd&amp;gt;0时代表可用Buff的实现buff的增加，生效，移除是互相独立的逻辑 buff的增加：buff增加的时机分为技能释放hit前，技能释放hit中，技能释放hit后。buff增加时注册对应的生效事件和移除的事件到战斗battleObj中。 buff的生效：使用事件触发，当battleObj触发了特定事件，则执行buff对应的OnEffect函数。 buff的移除：使用事件触发，当battleObj触发了特定事件，则执buff对应的OnRemove函数，并将该buff从实体对象中移除并取消注册。执行OnRemove函数的时候根据keepEffect决定是否保留buff修改的属性效果 buff的效果：所有的buff都只影响实体属性，配置提供接口给策划计算属性的变化值，技能的效果都抽象成属性去实现。例如眩晕效果，策划自定义一个眩晕属性，释放技能让受击者添加一个眩晕buff，将其眩晕属性置1，眩晕效果被驱散或者移除后，将其眩晕属性置0。例如标记类效果，策划自定义一个冰冻印记和冰冻爆裂属性，释放者每次攻击冰冻buff都让敌人身上的冰冻印记属性+1，冰冻印记达到3层后，跟随buff（冰冻爆裂buff与冰冻buff相同tag，优先级更高）被增加，移除冰冻印记buff并造成伤害。 buff的tag：每个buff都有多个标签，这个标签可以是策划自定义。当同标签类型buff叠加时，根据优先级覆盖，同优先级则根据最大限制数刷新buff。 buff的跟随：buff跟随的时机分为主buff增加时、主buff移除时、主buff生效时，主buff达到指定层数时，主buff满足条件则概率添加跟随buff，根据配置跟随主buff移除 buff的层数：buff的层数即是相同buffId的数量 buff的表现：buff的表现包括特效表现buffShow（播放时长配置决定），buff图标和buff飘字。目标选择使用行为树实现目标的选择，提供一些逻辑节点给策划搭配使用 事件系统buff的效果一般都基于多种特定的条件下才触发，通过订阅者模式可解耦代码逻辑。 事件处理器的数据结构 BattleObject.eventHandles[event] = { buffId1 = buffObj, } 订阅事件：当buff增加时，根据唯一的buffId注册事件到战斗对象battleObj中 function BattleObject:SubEvent(event, handlerBuff) 发布事件：当战斗流程中触发了某些条件（例如角色死亡时，回合结束时），则发布对应的事件，执行所有已注册该事件的buffObj执行OnEvent函数 function BattleObject:PubEvent(event, eventArgs, buffEffects) 取消订阅事件：buff被移除时需要取消订阅 function BattleObject:UnSubEvent(event, handlerBuff) 属性实现属性规划为培养属性以及战斗属性， 根据培养系统能影响到战斗的属性都规划为培养属性：血量上限，速度，攻击等。 只会在战斗中才衍生出来的属性为战斗属性：觉醒，束缚，护盾，当前血量，愤怒印记等。每个属性计算的维度都应该不受buff先后顺序的影响，属性常规的运算公式：local attr = (base + addbase1 + addbase2) * (1 + 百分比add1 + 百分比add2)数据的传递和交互服务端与客户端的数据交互以回合为单位： 选择主动技能前服务端需要推送战前数据，包含当前回合出手的实体对象，行动条进度，出手前触发的被动技能结果和buff效果。 回合出手后服务端需要推送主动技能的结果数据，包含被动技能结果和buff数据 当战斗结束后，服务端主动推送战斗结果战斗断线重连当玩家刚断开连接时，在agent服务中的玩家对象仍然存在，战斗服务对此不需要做任何处理，战斗服务推送的数据会失败，服务端会缓存这部分数据。 若重连成功，agent服务的玩家对象替换新旧连接的fd，补发缓存的那部分数据。 若超时依然没重连成功，agent服务的玩家对象执行下线逻辑，通知战斗服务触发战斗结束。战斗服务通知agent服务战斗结果，释放战斗池服务的唯一key，取消agent服务到战斗服的注册，解除战斗服playerObj与agent玩家对象的绑定，并移除战斗服务中的playerObj 若客户端是kill掉进程尝试重登，则在agent服务中的玩家对象会先执行下线逻辑，但此时不会通知战斗服务，而是记录战斗服务的唯一key，同时取消agent玩家对象与战斗服务playerObj的绑定，战斗服务判断取消注册的原因如果为重登，则不移除playerObj，只是将playerObj中的agent服务地址置空。下线逻辑执行完成后，玩家对象重新注册新的agent到原来的战斗服务，将新的agent服务地址赋予给原来旧playerObj战斗的特殊机制 特殊战斗玩法，例如pvp战斗需要在第N回合全体增加攻击，这种额外玩法带来的特殊机制，通过在战斗中创建一个空逻辑实体执行行为树去实现，这个空逻辑实体不参与战斗的运算，只执行行为树逻辑 多轮战斗，每个场次的战斗都是独立的battleObj，通过数据的继承去实现多轮战斗，这样做的好处是环境隔离，场次间的战斗不会耦合。战斗录像 将回合作为协议推送的最小单位，缓存战斗过程中服务器主动推送到客户端的协议数据，战斗结束后将其数据按照对应的协议结构序列化成二进制数组，并存储到独立于游戏服的mongo数据库中，设置TTL定时删除过期录像。将录像数据分段发送给客户端，由客户端根据协议结构解析二进制数据。" } ]
